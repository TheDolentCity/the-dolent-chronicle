---
import { getCollection, type InferEntrySchema, type RenderedContent } from "astro:content";
import { ThemeSelect } from "@/components/themes/ThemeSelect";
import BaseLayout from "@/layouts/BaseLayout.astro";
import Prose from "@/components/markdown/Prose.astro";
import { PageTitle } from "@/components/app/PageTitle";
import { PageDescription } from "@/components/app/PageDescription";
import { PostList } from "@/components/posts/Posts";
import { PageHomeButton } from "@/components/app/PageHomeButton";
import { SITE_TITLE } from "@/constants";
import { PageHeader } from "@/components/app/PageHeader";
import PageSection from "@/components/app/PageSection.astro";

interface Post {
	id: string;
	body?: string;
	collection: "posts";
	data: InferEntrySchema<"posts">;
	rendered?: RenderedContent;
	filePath?: string;
}

interface Props {
	posts: Array<Post>;
}

// Generate a new path for every collection entry
export async function getStaticPaths() {
	const collection = await getCollection("posts");
	const tags = [
		...new Set(
			collection
				.map((post) => post.data.tags)
				.flat()
				.sort()
		),
	];

	return tags.map((tag) => {
		if (!tag)
			return {
				params: { tag },
				props: { posts: [] },
			};
		const filteredPosts = collection.filter((post) => post.data.tags?.includes(tag)).sort((a, b) => b.data.published.valueOf() - a.data.published.valueOf());
		return {
			params: { tag },
			props: { posts: filteredPosts },
		};
	});
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout title={tag ?? SITE_TITLE} description="Posts with the provided tag.">
	<PageSection>
		<PageHeader>
			<PageHomeButton />
			<PageTitle>
				<span class="capitalize">{tag}</span>
			</PageTitle>
			<ThemeSelect client:only="react" className="not-md:hidden" />
		</PageHeader>
		<PageDescription>All posts with the {tag} tag on the blog.</PageDescription>
		<hr />
		<PostList posts={posts} />
	</PageSection>
</BaseLayout>
